name: Tests / Code Coverage
#  Tests / Code Coverage workflow runs unit tests and uploads a code coverage report
#  This workflow is run on pushes to main & every Pull Requests where a .go, .mod, .sum have been changed
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"

  install-tparse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Display go version
        run: go version
      - name: install tparse
        run: |
          go install github.com/mfridman/tparse@v0.8.3
      - uses: actions/cache@v3
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tparse-binary

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-arch: ["amd64", "arm", "arm64"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: technote-space/get-diff-action@v6.1.0
        id: git_diff
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - name: Build
        run: GOARCH=${{ matrix.go-arch }} LEDGER_ENABLED=false make build


  split-test-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create a file with all the pkgs
        run: go list ./... ./.github/scripts > pkgs.txt
      - name: Split pkgs into 4 files
        run: split -d -n l/4 pkgs.txt pkgs.txt.part.
      # cache multiple
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-00"
          path: ./pkgs.txt.part.00
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-01"
          path: ./pkgs.txt.part.01
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-02"
          path: ./pkgs.txt.part.02
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-03"
          path: ./pkgs.txt.part.03

  tests:
    runs-on: ubuntu-latest
    needs: split-test-files
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}"
        if: env.GIT_DIFF
      - name: test & coverage report creation
        run: |
          cat pkgs.txt.part.${{ matrix.part }} | xargs go test -race -mod=readonly -timeout 30m -coverprofile=${{ matrix.part }}profile.out -covermode=atomic -tags='ledger test_ledger_mock'
        if: env.GIT_DIFF
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-coverage"
          path: ./${{ matrix.part }}profile.out

  upload-coverage-report:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-00-coverage"
        if: env.GIT_DIFF
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-01-coverage"
        if: env.GIT_DIFF
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-02-coverage"
        if: env.GIT_DIFF
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-03-coverage"
        if: env.GIT_DIFF
      - run: |
          cat ./*profile.out | grep -v "mode: atomic" >> coverage.txt
        if: env.GIT_DIFF
      - name: filter out DONTCOVER
        run: |
          excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
          excludelist+=" $(find ./ -type f -name '*.pb.go')"
          excludelist+=" $(find ./ -type f -name '*.pb.gw.go')"
          excludelist+=" $(find ./ -type f -path './tests/mocks/*.go')"
          for filename in ${excludelist}; do
            filename=$(echo $filename | sed 's/^./github.com\/cosmos\/cosmos-sdk/g')
            echo "Excluding ${filename} from coverage report..."
            sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
          done
        if: env.GIT_DIFF
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
        if: env.GIT_DIFF


  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a
        with:
          images: ${{ env.REGISTRY }}/cosmos/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  # dynamically build a matrix of test/test suite pairs to run
  build-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - id: set-matrix
        run: echo "::set-output name=matrix::$(go run .github/scripts/build_test_matrix.go)"


  # the tag of the image will differ if this is a PR or the branch is being merged into main.
  # we store the tag as an environment variable and use it in the E2E tests to determine the tag.
  determine-image-tag:
    runs-on: ubuntu-latest
    outputs:
      simd-tag: ${{ steps.get-tag.outputs.simd-tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - id: get-tag
        run: |
          tag=$(go run .github/scripts/determine_simd_tag.go -pr "${{ github.event.pull_request.number }}" )
          echo "Using tag $tag"
          echo "::set-output name=simd-tag::$tag"


  e2e:
    runs-on: ubuntu-latest
    needs:
      - build-test-matrix
      - determine-image-tag
      - docker-build
    env:
      SIMD_TAG: ${{ needs.determine-image-tag.outputs.simd-tag }}
      SIMD_IMAGE: ghcr.io/cosmos/ibc-go-simd-e2e
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build-test-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Log in to the Container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run e2e Test
        run: |
          cd e2e
          make e2e-test suite=${{ matrix.suite }} test=${{ matrix.test }}
